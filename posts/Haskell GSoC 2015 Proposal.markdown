---
title: Speed Metrics for Nofib and GHC
date: 2015-03-27
---

# Abstract
Tracking performance metrics with a large project like GHC is a daunting task.  This is especially true for GHC where performance metrics have been gathered through the nofib suite.  There are a couple of shortcomings of nofibs that will be addressed by this GSoC project.  1) The performance numbers generated by nofibs are not trustworthy.  Tests are run once leading to inaccurate performance data. 2) nofibs is an all or nothing test suite.  Individual tests are cumbersome to deal with.  My goal is to enhance nofibs to address both (1) and (2).  Part of my work will be enhancing gipeda to use the better information from nofibs to create a production quality performance monitor for GHC to live at https://perf.haskell.org.

#Summary

+    Give nofib a better test runner interface
+    Make nofib numbers more meaningful
+    Make gipeda production ready

##Nofib

Nofib is hosted at https://git.haskell.org/nofib.git and contains a large variety of code written in Haskell to exercise GHC.  Thanks to this suite, several bugs have been found before they found their way into the tree.  The primary usage of nofib is to compile the suite after making changes to GHC, running the suite, and comparing the results before the changes to after the changes are made.

The secondary usage of nofib is to track performance data across releases of GHC.  More recently nofib runtime data is used to track performance per commit to GHC.  These last two roles are where the cracks begin to show.

The primary complaint about nofib is that the performance metrics have no clearly defined error bounds.  The numbers spit out by the test programs are taken as gospel and are not run multiple times and correlated.  This will take the longest amount of time to address as there are several issues at play.

###Reuse the Most Build Infrastructure

To reuse the most infrastructure code in nofibs, the approach is to create a test runner program that would ship in the nofibs tree and be a cousin to nofibs-analyse.  This program would use Shake to find all the tests in the tree and provide a uniform view to the user on how to execute all the tests, some of the tests, a particular test, or none of the tests.  This tool would also allow for better handling of test reruns and correlating data across multiple runs for improved performance data resulting in running nofibs. 

This approach would leave the build system mostly untouched, but would add another program to the tree and change the way the tests are run to give the advantages listed.  The approach for this program would be nearly identical to large chunks of gipeda (see below). 

##Gipeda

Compared to nofib, gipeda, hosted at https://github.com/nomeata/gipeda.git, is a very young piece of software.  Gipeda is a test runner and summarizes data across multiple runs of the repository under test.  Currently there are a lot of manual steps required to make gipeda work correctly for nofib or GHC directly.  Some work has been done in this area.  My job would be to write better documentation around gipeda and assist in reducing the manual steps required to get a site up and running with historic performance data.  So far it has been difficult to see how much work will need to be done on gipeda directly compared to updating nofib, but from my tinkering it should be the least amount of work in this proposal, but still could be 1/3 of the time.

# Addendum

My proposal was not in melange. Once I hit submit on the proposal, the submission window had expired (about 2 seconds late).  This stands as a record of a bad GSoC proposal.  Problems include lack of incoporation of feedback from potential mentors.  Lack of depth or specifics in time estimation.  This is a good first draft and will inspire future posts about these topics as I work with these softwares more.
